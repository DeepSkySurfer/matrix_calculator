/*
 * @file main.cpp
 * @brief –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 * @details –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 

#include "matrix.h"
#include <iostream>
#include <iomanip>

using namespace std;

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
 
void demo_create_and_free() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–û–ó–î–ê–ù–ò–ï –ò –û–°–í–û–ë–û–ñ–î–ï–ù–ò–ï –ú–ê–¢–†–ò–¶ ===" << endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã 3x4
    Matrix A = create_matrix(3, 4);
    cout << "–°–æ–∑–¥–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ A —Ä–∞–∑–º–µ—Ä–æ–º " << A.rows << "x" << A.cols << endl;
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    int counter = 1;
    for (int i = 0; i < A.rows; i++) {
        for (int j = 0; j < A.cols; j++) {
            A.data[i][j] = counter++;
        }
    }
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ A –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:" << endl;
    print_matrix(A);
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    free_matrix(A);
    cout << "–ü–∞–º—è—Ç—å –º–∞—Ç—Ä–∏—Ü—ã A –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞" << endl << endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
 
void demo_matrix_addition() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–õ–û–ñ–ï–ù–ò–ï –ú–ê–¢–†–ò–¶ ===" << endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü 2x2
    Matrix A = create_matrix(2, 2);
    Matrix B = create_matrix(2, 2);
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã A: [[1, 2], [3, 4]]
    A.data[0][0] = 1.0; A.data[0][1] = 2.0;
    A.data[1][0] = 3.0; A.data[1][1] = 4.0;
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã B: [[5, 6], [7, 8]]
    B.data[0][0] = 5.0; B.data[0][1] = 6.0;
    B.data[1][0] = 7.0; B.data[1][1] = 8.0;
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ A:" << endl;
    print_matrix(A);
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ B:" << endl;
    print_matrix(B);
    
    // –°–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    Matrix C = matrix_add(A, B);
    cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è A + B:" << endl;
    print_matrix(C);
    
    free_matrix(A);
    free_matrix(B);
    free_matrix(C);
    cout << endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
 
void demo_matrix_multiplication() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –£–ú–ù–û–ñ–ï–ù–ò–ï –ú–ê–¢–†–ò–¶ ===" << endl;
    
    // –ú–∞—Ç—Ä–∏—Ü–∞ A: 2x3
    Matrix A = create_matrix(2, 3);
    A.data[0][0] = 1; A.data[0][1] = 2; A.data[0][2] = 3;
    A.data[1][0] = 4; A.data[1][1] = 5; A.data[1][2] = 6;
    
    // –ú–∞—Ç—Ä–∏—Ü–∞ B: 3x2
    Matrix B = create_matrix(3, 2);
    B.data[0][0] = 7;  B.data[0][1] = 8;
    B.data[1][0] = 9;  B.data[1][1] = 10;
    B.data[2][0] = 11; B.data[2][1] = 12;
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ A (2x3):" << endl;
    print_matrix(A);
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ B (3x2):" << endl;
    print_matrix(B);
    
    // –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
    Matrix C = matrix_multiply(A, B);
    cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è A √ó B:" << endl;
    print_matrix(C);
    
    free_matrix(A);
    free_matrix(B);
    free_matrix(C);
    cout << endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
 
void demo_matrix_transpose() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –¢–†–ê–ù–°–ü–û–ù–ò–†–û–í–ê–ù–ò–ï –ú–ê–¢–†–ò–¶–´ ===" << endl;
    
    // –ú–∞—Ç—Ä–∏—Ü–∞ 3x2
    Matrix A = create_matrix(3, 2);
    A.data[0][0] = 1; A.data[0][1] = 2;
    A.data[1][0] = 3; A.data[1][1] = 4;
    A.data[2][0] = 5; A.data[2][1] = 6;
    
    cout << "–ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A (3x2):" << endl;
    print_matrix(A);
    
    // –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    Matrix B = matrix_transpose(A);
    cout << "–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A^T (2x3):" << endl;
    print_matrix(B);
    
    free_matrix(A);
    free_matrix(B);
    cout << endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
 
void demo_matrix_from_array() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶–´ –ò–ó –ú–ê–°–°–ò–í–ê ===" << endl;
    
    // –û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    double data[] = {
        1.5, 2.5, 3.5,
        4.5, 5.5, 6.5,
        7.5, 8.5, 9.5
    };
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã 3x3 –∏–∑ –º–∞—Å—Å–∏–≤–∞
    Matrix A = matrix_from_array(data, 3, 3);
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–∑ –º–∞—Å—Å–∏–≤–∞:" << endl;
    print_matrix(A);
    
    free_matrix(A);
    cout << endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 
void demo_error_handling() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===" << endl;
    
    cout << "1. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏:" << endl;
    try {
        Matrix A = create_matrix(-1, 5);
        cout << "–û–®–ò–ë–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!" << endl;
        free_matrix(A);
    } catch (const exception& e) {
        cout << "‚úì –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " << e.what() << endl;
    }
    
    cout << "2. –ü–æ–ø—ã—Ç–∫–∞ —Å–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤:" << endl;
    try {
        Matrix A = create_matrix(2, 2);
        Matrix B = create_matrix(3, 3);
        Matrix C = matrix_add(A, B);
        cout << "–û–®–ò–ë–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!" << endl;
        free_matrix(A);
        free_matrix(B);
        free_matrix(C);
    } catch (const exception& e) {
        cout << "‚úì –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " << e.what() << endl;
    }
    
    cout << "3. –ü–æ–ø—ã—Ç–∫–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –º–∞—Ç—Ä–∏—Ü:" << endl;
    try {
        Matrix A = create_matrix(2, 3);
        Matrix B = create_matrix(2, 3); // –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        Matrix C = matrix_multiply(A, B);
        cout << "–û–®–ò–ë–ö–ê: –î–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!" << endl;
        free_matrix(A);
        free_matrix(B);
        free_matrix(C);
    } catch (const exception& e) {
        cout << "‚úì –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " << e.what() << endl;
    }
    
    cout << endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π
 
void demo_large_matrix() {
    cout << "=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –†–ê–ë–û–¢–ê –° –ë–û–õ–¨–®–û–ô –ú–ê–¢–†–ò–¶–ï–ô ===" << endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    Matrix large = create_matrix(15, 12);
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for (int i = 0; i < large.rows; i++) {
        for (int j = 0; j < large.cols; j++) {
            large.data[i][j] = (i + 1) * 0.1 + (j + 1) * 0.01;
        }
    }
    
    cout << "–ë–æ–ª—å—à–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 15x12 (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥):" << endl;
    print_matrix(large);
    
    free_matrix(large);
    cout << endl;
}

/**
 * @brief –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 
void demo_complex_example() {
    cout << "=== –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–†–ò–ú–ï–† ===" << endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    Matrix A = create_matrix(2, 2);
    Matrix B = create_matrix(2, 2);
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
    A.data[0][0] = 2; A.data[0][1] = 1;
    A.data[1][0] = 1; A.data[1][1] = 3;
    
    B.data[0][0] = 5; B.data[0][1] = 6;
    B.data[1][0] = 7; B.data[1][1] = 8;
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ A:" << endl;
    print_matrix(A);
    
    cout << "–ú–∞—Ç—Ä–∏—Ü–∞ B:" << endl;
    print_matrix(B);
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    Matrix sum = matrix_add(A, B);
    Matrix product = matrix_multiply(A, B);
    Matrix A_transposed = matrix_transpose(A);
    
    cout << "–°—É–º–º–∞ A + B:" << endl;
    print_matrix(sum);
    
    cout << "–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ A √ó B:" << endl;
    print_matrix(product);
    
    cout << "–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è A:" << endl;
    print_matrix(A_transposed);
    
    // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    free_matrix(A);
    free_matrix(B);
    free_matrix(sum);
    free_matrix(product);
    free_matrix(A_transposed);
    
    cout << endl;
}

/**
 * @brief –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @return int –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
 
int main() {
    cout << "üéØ –ú–ê–¢–†–ò–ß–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†" << endl;
    cout << "================================" << endl;
    
    try {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        demo_create_and_free();
        demo_matrix_addition();
        demo_matrix_multiplication();
        demo_matrix_transpose();
        demo_matrix_from_array();
        demo_large_matrix();
        demo_complex_example();
        demo_error_handling();
        
        cout << "‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!" << endl;
        cout << "üìö –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: doxygen Doxyfile" << endl;
        
        return 0;
        
    } catch (const exception& e) {
        cerr << "‚ùå –û–®–ò–ë–ö–ê –í –ü–†–û–ì–†–ê–ú–ú–ï: " << e.what() << endl;
        return 1;
    } catch (...) {
        cerr << "‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –í –ü–†–û–ì–†–ê–ú–ú–ï" << endl;
        return 1;
    }
}
*/
/**
 * @file main.cpp
 * @brief –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 * @details –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–∞—Ç—Ä–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */

#include "matrix.h"
#include <iostream>
#include <iomanip>

using namespace std;

// –í—Å–µ demo-—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å...
void demo_create_and_free() { /* ... */ }
void demo_matrix_addition() { /* ... */ }
void demo_matrix_multiplication() { /* ... */ }
void demo_matrix_transpose() { /* ... */ }
void demo_matrix_from_array() { /* ... */ }
void demo_error_handling() { /* ... */ }
void demo_large_matrix() { /* ... */ }
void demo_complex_example() { /* ... */ }

/**
 * @brief –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @return int –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
 */
int main() {
    cout << "üéØ –ú–ê–¢–†–ò–ß–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†" << endl;
    cout << "================================" << endl;
    
    try {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        demo_create_and_free();
        demo_matrix_addition();
        demo_matrix_multiplication();
        demo_matrix_transpose();
        demo_matrix_from_array();
        demo_large_matrix();
        demo_complex_example();
        demo_error_handling();
        
        cout << "‚úÖ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!" << endl;
        cout << "üìö –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: doxygen Doxyfile" << endl;
        
        return 0;
        
    } catch (const exception& e) {
        cerr << "‚ùå –û–®–ò–ë–ö–ê –í –ü–†–û–ì–†–ê–ú–ú–ï: " << e.what() << endl;
        return 1;
    } catch (...) {
        cerr << "‚ùå –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê –í –ü–†–û–ì–†–ê–ú–ú–ï" << endl;
        return 1;
    }
}